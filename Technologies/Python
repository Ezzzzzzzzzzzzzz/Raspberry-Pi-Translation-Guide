# Translating Python

Python is a popular object-oriented programming language, often used for web and app development. 

Generally, Python code should not be translated with the exception of variable names, strings and comments:

+ String is a sequence of characters, created with single quotes, double quotes or triple quotes:
 
The strings Hello and Here’s a picture of a dog… should be translated because they will be displayed when the learner runs the programme so it’s important for them to understand what it says. 

If we keep the strings in English, the learner won’t understand what the printed message means. As a rule, the text that’s within single ('xx'), double ("xx") or triple quotes ('''xx''') should be translated.

The function print() (and all other Python functions) should not be translated because if it is, the code won’t work.

+ Variables are used to store information and to access it. Programmer chooses names of variables so they should be translated to make them more meaningful to learners. 

For example, we can create a variable called name and assign it the value Larry. We can then ask Python to print the variable name and it will display Larry (on the right hand side):

 

The variable name should be translated (but please remember not to use any of your language’s special characters):

 

You can also translate the value of the variable (here, Larry) if it’s a string (i.e. if it’s between single/double/triple quotes) to make it more meaningful to the learners:

 

However, please remember that the value of a variable could be a Python function, in which case it should not be translated. For example:

 

If we translate input(), this entire procedure will not be executed because Python will not be able to recognise the translation as a function that it needs to run. 

+ Comments are used by programmes to give more details about a given line of code; they are marked with the # sign. These should be translated.

GPIO.setup(11,GPIO.OUT)  # Sets up pin 11 to an output (instead of an input)
p = GPIO.PWM(11, 50)     # Sets up pin 11 as a PWM pin
p.start(0)               # Starts running PWM on the pin and sets it to 0
